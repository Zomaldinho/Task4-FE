{"version":3,"sources":["Components/Signin/Signin.js","Components/Register/Register.js","App.js","serviceWorker.js","index.js"],"names":["Signin","props","emailChange","txt","setState","email","target","value","passwordChange","password","enterPress","e","which","submit","fetch","method","headers","body","JSON","stringify","state","toLowerCase","then","res","json","data","id","loadUser","routeChange","window","alert","catch","err","console","log","className","type","autoComplete","onChange","onKeyPress","onClick","Component","Register","nameChange","name","phoneChange","phone","addressChange","address","password2Change","password2","errmsg","includes","App","Routing","route","user","date","this","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a6dc7e63.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Signin extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n    };\r\n  }\r\n\r\n  //handle email change\r\n  emailChange = (txt) => {\r\n    this.setState({ email: txt.target.value });\r\n  };\r\n\r\n  //handle password change\r\n  passwordChange = (txt) => {\r\n    this.setState({ password: txt.target.value });\r\n  };\r\n\r\n  //handle enter key press\r\n  enterPress=(e)=>{\r\n    if(e.which=== 13){\r\n      this.submit()\r\n    }\r\n  }\r\n\r\n  //handle submit button onclick event\r\n  submit = () => {\r\n    fetch(`https://task4-server.herokuapp.com/signin`, {\r\n      method: 'post',\r\n      headers: { 'content-type': 'application/json' },\r\n      body: JSON.stringify({\r\n        email: this.state.email.toLowerCase(),\r\n        password: this.state.password,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.id) {\r\n          this.props.loadUser(data);\r\n          this.props.routeChange('home');\r\n        } else {\r\n          window.alert('Please Fill All The Fields With Proper Credintals');\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"forms\">\r\n        <br></br>\r\n        <h1>Please Sign in or Register to get to the App</h1>\r\n        <fieldset>\r\n          <legend>Sign In</legend>\r\n          <label>Email:</label>\r\n          <input\r\n            type=\"text\"\r\n            autoComplete=\"on\"\r\n            onChange={(txt) => this.emailChange(txt)}\r\n          ></input>\r\n          <br></br>\r\n          <br></br>\r\n          <label>Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            onChange={(txt) => this.passwordChange(txt)}\r\n            onKeyPress={(e)=>this.enterPress(e)}\r\n          ></input>\r\n          <br></br>\r\n          <br></br>\r\n          <button onClick={() => this.submit()}>Submit</button>\r\n          <br></br>\r\n          <button onClick={() => this.props.routeChange('register')}>\r\n            Register\r\n          </button>\r\n        </fieldset>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signin;\r\n","import React, { Component } from 'react';\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      email: '',\r\n      password: '',\r\n      password2: '',\r\n      phone: '',\r\n      address: '',\r\n    };\r\n  }\r\n\r\n  //handling name change\r\n  nameChange = (txt) => {\r\n    this.setState({ name: txt.target.value });\r\n  };\r\n\r\n  //handling email change\r\n  emailChange = (txt) => {\r\n    this.setState({ email: txt.target.value });\r\n  };\r\n\r\n  //handling phone change\r\n  phoneChange = (txt) => {\r\n    this.setState({ phone: txt.target.value });\r\n  };\r\n\r\n  //handling address change\r\n  addressChange = (txt) => {\r\n    this.setState({ address: txt.target.value });\r\n  };\r\n\r\n  //handling password change\r\n  passwordChange = (txt) => {\r\n    this.setState({ password: txt.target.value });\r\n  };\r\n\r\n  //handling retyped password change\r\n  password2Change = (txt) => {\r\n    this.setState({ password2: txt.target.value });\r\n  };\r\n\r\n  //handle enter key press\r\n  enterPress = (e) => {\r\n    if (e.which === 13) {\r\n      this.submit();\r\n    }\r\n  };\r\n\r\n  //handle register button onclick event\r\n  submit = () => {\r\n    if (this.state.password !== this.state.password2) {\r\n      return window.alert('Re-Typed Password is Not Matching');\r\n    }\r\n    fetch(`https://task4-server.herokuapp.com/register`, {\r\n      method: 'post',\r\n      headers: { 'content-type': 'application/json' },\r\n      body: JSON.stringify({\r\n        name: this.state.name,\r\n        email: this.state.email.toLowerCase(),\r\n        password: this.state.password,\r\n        phone: this.state.phone,\r\n        address: this.state.address,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.id) {\r\n          window.alert('Successfully Registered');\r\n          this.props.routeChange('signin');\r\n        } else if (data === 'Wrong Inputs') {\r\n          window.alert(\r\n            'Please Fill All The Fields With Proper Credintals \\n \\\r\n            you must: \\n\\\r\n            - Fill in all the inputs \\n\\\r\n            - Enter a valid email \\n\\\r\n            - Enter a valid phone number'\r\n          );\r\n        } else if (data.errmsg.includes('duplicate key')) {\r\n          window.alert('Email is Already Registered');\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"forms\">\r\n        <br></br>\r\n        <h1>Please Sign in or Register to get to the App</h1>\r\n        <fieldset>\r\n          <legend>Register</legend>\r\n          <label>Name:</label>\r\n          <input type=\"text\" onChange={(txt) => this.nameChange(txt)}></input>\r\n          <br></br>\r\n          <br></br>\r\n          <label>Email:</label>\r\n          <input\r\n            type=\"email\"\r\n            onChange={(txt) => this.emailChange(txt)}\r\n          ></input>\r\n          <br></br>\r\n          <br></br>\r\n          <label>Phone:</label>\r\n          <input\r\n            type=\"email\"\r\n            onChange={(txt) => this.phoneChange(txt)}\r\n          ></input>\r\n          <br></br>\r\n          <br></br>\r\n          <label>Address:</label>\r\n          <input\r\n            type=\"email\"\r\n            onChange={(txt) => this.addressChange(txt)}\r\n          ></input>\r\n          <br></br>\r\n          <br></br>\r\n          <label>password:</label>\r\n          <input\r\n            type=\"password\"\r\n            onChange={(txt) => this.passwordChange(txt)}\r\n          ></input>\r\n          <br></br>\r\n          <br></br>\r\n          <label>Re-type Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            onChange={(txt) => this.password2Change(txt)}\r\n            onKeyPress={(e) => this.enterPress(e)}\r\n          ></input>\r\n          <br></br>\r\n          <br></br>\r\n          <button onClick={() => this.submit()}> Register</button>\r\n          <br></br>\r\n          <button onClick={() => this.props.routeChange('signin')}>\r\n            Signin\r\n          </button>\r\n        </fieldset>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","import React, { Component } from 'react';\nimport Signin from './Components/Signin/Signin';\nimport Register from './Components/Register/Register';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      route: 'signin',\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        date: '',\n      },\n    };\n  }\n\n  //Routing functions to handle renered components\n  Routing = (route) => {\n    this.setState({ route: route });\n  };\n\n  //retrieving user data from signin and storing in state\n  loadUser = (user) => {\n    this.setState({\n      user: {\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        date: user.date,\n      },\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.route === 'home' ? (\n          <div>\n            <br></br>\n            <h1>Welcome {this.state.user.name}</h1>\n          </div>\n        ) : this.state.route === 'signin' ? (\n          <Signin loadUser={this.loadUser} routeChange={this.Routing}  />\n        ) : (\n          <Register routeChange={this.Routing} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}